module CLA( input [3:0] A, B, Cin
				output [3:0] s, P, G);
	logic P0;
	logic P1;
	logic P2;
	logic P3;
	
	logic G0;
	logic G1;
	logic G2;
	logic G3;
	
	logic C1;
	logic C2;
	logic C3;
	logic Cout;
	
	assign P0 = A[0]^B[0];
	assign P1 = A[1]^B[1];
	assign P2 = A[2]^B[2];
	assign P3 = A[3]^B[3];
	
	assign G0 = A[0]&B[0];
	assign G1 = A[1]&B[1];	
	assign G2 = A[2]&B[2];
	assign G3 = A[3]&B[3];
	
	assign P = P0&P1&P2&P3;
	assign G = G3|(G2&P3)|(G1&P3&P2)|(G0&P3&P2&P1);
	
	full_addr add1(A[0],B[0],Cin,S[0],C1);
	full_addr add1(A[1],B[1],C1,S[0],C2);
	full_addr add1(A[2],B[2],C2,S[0],C3);
	full_addr add1(A[3],B[3],C3,S[0], Cout);
endmodule
	
	